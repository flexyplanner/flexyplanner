{
  "openapi": "3.0.1",
  "info": {
    "version": "2.0.0",
    "title": "Flexyplanner API docs",
    "description": "API documentation for GoIT project 'Flexyplanner'. [Backend github repository](https://github.com/DanTsvirkun/slimmom-backend)",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [{ "url": "http://localhost:3000" }],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Promo-codes",
      "description": "promo  endpoints"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Provided email already exists",
            "content": {}
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User authentication",
        "parameters": [],
        "requestBody": {
          "description": "Authentication's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "403": {
            "description": "Email doesn't exist / Password is wrong",
            "content": {}
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Logout",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": ["Auth"],
        "summary": "Get new pair of tokens (use Bearer {refreshToken} instead of accessToken)",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "requestBody": {
          "description": "Request body with session's id",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokensRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokensResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body) / No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid refresh token)",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
    "/promo": {
      "get": {
        "tags": ["Promo-codes"],
        "summary": "Search and get a list of Promo codes by query",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "promo",
            "in": "query",
            "description": "Name of the promo code you want to find",
            "required": false
          },
          {
            "name": "/",
            "description": "get All",
            "required": false,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          },
          "400": {
            "description": "No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Invalid query name / Invalid user / Invalid session",
            "content": {}
          }
        }
      },
      "post" : {
        "tags": ["Promo-codes"],
        "summary": "Create Promo codes by Common with date & Personal without date",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostPromoCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "all created Promo codes",
            "content": {}
          }
        }
      },
      "patch" : {
        "tags": ["Promo-codes"],
        "summary": "Switch isActive to true or false",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Promo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {}
          }
        }
      },
      "delete" : {
        "tags": ["Promo-codes"],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Switch isActive to true or false",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Promo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "required": ["email", "password", "username"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "minLength": 3,
            "maxLength": 254
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123",
            "minLength": 8,
            "maxLength": 100
          },
          "username": {
            "type": "string",
            "description": "User's name",
            "example": "Emma",
            "minLength": 3,
            "maxLength": 254
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "username": {
            "type": "string",
            "description": "User's name",
            "example": "Emma"
          },
          "id": {
            "type": "string",
            "description": "User's id",
            "example": "507f1f77bcf86cd799439011"
          }
        }
      },
      "LoginRequest": {
        "required": ["email", "password"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "minLength": 3,
            "maxLength": 254
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123",
            "minLength": 8,
            "maxLength": 100
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Session's access token (needed for all requests)",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI1ZmMyMDg1YmQwOTM2NTI4MTA3Y2UyNzQiLCJzaWQiOiI1ZmMyZDJmY2UxZDIwNTA2NzAyYmRkMjIiLCJpYXQiOjE2MDY2MDM1MTYsImV4cCI6MTYwNjYwNzExNn0.rJ_QjU4KvA76H96RHsvOBChK0Vjbd0NmqjMxdQVJIXA"
          },
          "refreshToken": {
            "type": "string",
            "description": "Session's refresh token (needed for /auth/refresh)",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI1ZmMyMDg1YmQwOTM2NTI4MTA3Y2UyNzQiLCJzaWQiOiI1ZmMyZDJmY2UxZDIwNTA2NzAyYmRkMjIiLCJpYXQiOjE2MDY2MDM1MTYsImV4cCI6MTYwNjYwNzExNn0.rJ_QjU4KvA76H96RHsvOBChK0Vjbd0NmqjMxdQVJIXB"
          },
          "sid": {
            "type": "string",
            "description": "Session's id (needed for /auth/refresh)",
            "example": "507f1f77bcf86cd799439011"
          },
          "todaySummary": {
            "type": "object",
            "description": "Today's summary (could be empty if no summary for today exists)",
            "properties": {
              "date": {
                "type": "string",
                "description": "Day's date",
                "example": "2020-12-31"
              },
              "kcalLeft": {
                "type": "number",
                "description": "Kcal left to consume",
                "example": 1000
              },
              "kcalConsumed": {
                "type": "number",
                "description": "Kcal consumed",
                "example": 1000
              },
              "dailyRate": {
                "type": "number",
                "description": "Daily rate in kcal",
                "example": 2000
              },
              "percentsOfDailyRate": {
                "type": "number",
                "description": "Percents consumed of daily rate",
                "example": 50
              },
              "userId": {
                "type": "ObjectId",
                "description": "User's id",
                "example": "507f1f77bcf86cd799439011"
              },
              "id": {
                "type": "ObjectId",
                "description": "Day summary's id",
                "example": "507f1f77bcf86cd799439012"
              }
            }
          },
          "user": {
            "type": "object",
            "description": "User's data",
            "properties": {
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              },
              "username": {
                "type": "string",
                "description": "User's name",
                "example": "Emma"
              },
              "userData": {
                "type": "object",
                "description": "User's daily rate data",
                "properties": {
                  "weight": {
                    "type": "number",
                    "description": "User's weight (kg)",
                    "minimum": 20,
                    "maximum": 500,
                    "example": 100
                  },
                  "height": {
                    "type": "number",
                    "description": "User's height (cm)",
                    "minimum": 100,
                    "maximum": 250,
                    "example": 170
                  },
                  "age": {
                    "type": "number",
                    "description": "User's age",
                    "minimum": 18,
                    "maximum": 100,
                    "example": 30
                  },
                  "bloodType": {
                    "type": "number",
                    "description": "User's blood type",
                    "enum": [1, 2, 3, 4]
                  },
                  "desiredWeight": {
                    "type": "number",
                    "description": "User's desired weight",
                    "minimum": 20,
                    "maximum": 500,
                    "example": 60
                  },
                  "dailyRate": {
                    "type": "string",
                    "description": "Your daily rate in kcal",
                    "example": 2000
                  },
                  "notAllowedProducts": {
                    "type": "array",
                    "description": "User's not allowed products (based on blood type)",
                    "items": {
                      "type": "string",
                      "description": "Not allowed product",
                      "example": "Омлет"
                    }
                  }
                }
              },
              "id": {
                "type": "string",
                "description": "User's id",
                "example": "507f1f77bcf86cd799439011"
              }
            }
          }
        }
      },
      "RefreshTokensRequest": {
        "type": "object",
        "required": ["sid"],
        "properties": {
          "sid": {
            "type": "string",
            "description": "Session's id ('sid' field after authentication)",
            "example": "507f1f77bcf86cd799439011"
          }
        }
      },
      "RefreshTokensResponse": {
        "type": "object",
        "properties": {
          "newAccessToken": {
            "type": "string",
            "description": "Access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI1ZmMyMDg1YmQwOTM2NTI4MTA3Y2UyNzQiLCJzaWQiOiI1ZmMyZDJmY2UxZDIwNTA2NzAyYmRkMjIiLCJpYXQiOjE2MDY2MDM1MTYsImV4cCI6MTYwNjYwNzExNn0.rJ_QjU4KvA76H96RHsvOBChK0Vjbd0NmqjMxdQVJIXA"
          },
          "newRefreshToken": {
            "type": "string",
            "description": "Refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI1ZmMyMDg1YmQwOTM2NTI4MTA3Y2UyNzQiLCJzaWQiOiI1ZmMyZDJmY2UxZDIwNTA2NzAyYmRkMjIiLCJpYXQiOjE2MDY2MDM1MTYsImV4cCI6MTYwNjYwNzExNn0.rJ_QjU4KvA76H96RHsvOBChK0Vjbd0NmqjMxdQVJIXB"
          },
          "sid": {
            "type": "string",
            "description": "New session's id",
            "example": "507f1f77bcf86cd799439011"
          }
        }
      },
      "Promo": {
        "type": "object",
        "properties": {
          "promocode": {
            "type": "string",
            "description": "promo code",
            "example": "13m5h0kF"
          }
        }
      },
      "PostPromoCreate": {
        "type": "object",
        "properties": {
          "discount": {
            "type": "number",
            "description": "discount percent",
            "required": true,
            "example": 10
          },
          "amount": {
            "type": "number",
            "description": "number of promos to generate",
            "required": true,
            "example": 5
          },
          "type": {
            "type": "string",
            "description": "Type discount 'Common' or 'Personal'",
            "required": true,
            "example": "Common"
          },
          "from": {
            "type": "string",
            "description": "Data start enable",
            "example": "2023-01-06T13:03:40.939Z"
          },
          "to": {
            "type": "string",
            "description": "Data start enable",
            "example": "2023-05-06T13:03:40.939Z"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
